// <auto-generated />
using System;
using ElectronicQueue.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ElectronicQueue.Data.Migrations
{
    [DbContext(typeof(EqDbContext))]
    [Migration("20211114153342_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ElectronicQueue.Data.Domains.QueueDomain", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("LastTicketId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Letters")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("ProviderId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("LastTicketId")
                        .IsUnique()
                        .HasFilter("[LastTicketId] IS NOT NULL");

                    b.HasIndex("ProviderId")
                        .IsUnique();

                    b.ToTable("Queue");
                });

            modelBuilder.Entity("ElectronicQueue.Data.Domains.ServiceDomain", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<bool>("IsProvided")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("ProviderId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("ElectronicQueue.Data.Domains.ServicePointDomain", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("ProviderId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("ServicePointState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ServicePoint");
                });

            modelBuilder.Entity("ElectronicQueue.Data.Domains.ServiceProviderDomain", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ServiceProvider");
                });

            modelBuilder.Entity("ElectronicQueue.Data.Domains.TicketDomain", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<decimal?>("NextTicketId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("TimeUpdatedState")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NextTicketId")
                        .IsUnique()
                        .HasFilter("[NextTicketId] IS NOT NULL");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("ElectronicQueue.Data.Domains.QueueDomain", b =>
                {
                    b.HasOne("ElectronicQueue.Data.Domains.TicketDomain", "LastTicket")
                        .WithOne("Queue")
                        .HasForeignKey("ElectronicQueue.Data.Domains.QueueDomain", "LastTicketId")
                        .HasConstraintName("FK_LastTiket_Queue")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ElectronicQueue.Data.Domains.ServiceProviderDomain", "Provider")
                        .WithOne("Queue")
                        .HasForeignKey("ElectronicQueue.Data.Domains.QueueDomain", "ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastTicket");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ElectronicQueue.Data.Domains.ServiceDomain", b =>
                {
                    b.HasOne("ElectronicQueue.Data.Domains.ServiceProviderDomain", "Provider")
                        .WithMany("Services")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ElectronicQueue.Data.Domains.ServicePointDomain", b =>
                {
                    b.HasOne("ElectronicQueue.Data.Domains.ServiceProviderDomain", "Provider")
                        .WithMany("ServicePoints")
                        .HasForeignKey("ProviderId");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ElectronicQueue.Data.Domains.TicketDomain", b =>
                {
                    b.HasOne("ElectronicQueue.Data.Domains.TicketDomain", "NextTicket")
                        .WithOne("PreviousTicket")
                        .HasForeignKey("ElectronicQueue.Data.Domains.TicketDomain", "NextTicketId")
                        .HasConstraintName("FK_CurentTikcet_Next_Ticket")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("NextTicket");
                });

            modelBuilder.Entity("ElectronicQueue.Data.Domains.ServiceProviderDomain", b =>
                {
                    b.Navigation("Queue");

                    b.Navigation("ServicePoints");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ElectronicQueue.Data.Domains.TicketDomain", b =>
                {
                    b.Navigation("PreviousTicket");

                    b.Navigation("Queue");
                });
#pragma warning restore 612, 618
        }
    }
}
